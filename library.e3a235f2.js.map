{"mappings":"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","sources":["<anon>","src/library.js","src/scripts/library-films.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequired7c6\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequired7c6\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nparcelRequire(\"ejCrU\");\nparcelRequire(\"iwVzF\");\nparcelRequire(\"g3qy3\");\n\nvar $ccqLe = parcelRequire(\"ccqLe\");\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const watchedBtn = document.querySelector(\".button-watched\");\n    const queueBtn = document.querySelector(\".button-queue\");\n    const galleryLib = document.querySelector(\".gallery_lib ul\");\n    const emptyLibraryText = document.querySelector(\".library_text_empty\");\n    const libraryImgContainer = document.querySelector(\".library_img_container\");\n    if (!watchedBtn || !queueBtn || !galleryLib || !emptyLibraryText || !libraryImgContainer) {\n        console.error(\"One or more required elements are missing from the DOM\");\n        return;\n    }\n    function displayMoviesFromStorage(storageKey) {\n        const movies = JSON.parse(localStorage.getItem(storageKey)) || [];\n        galleryLib.innerHTML = \"\";\n        if (movies.length === 0) {\n            emptyLibraryText.style.display = \"block\";\n            libraryImgContainer.style.display = \"flex\";\n        } else {\n            emptyLibraryText.style.display = \"none\";\n            libraryImgContainer.style.display = \"none\";\n            movies.forEach((movie)=>{\n                const card = document.createElement(\"li\");\n                card.classList.add(\"card\");\n                const posterUrl = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n                const posterImage = document.createElement(\"img\");\n                posterImage.src = posterUrl;\n                posterImage.alt = movie.title;\n                posterImage.classList.add(\"movie-poster\");\n                card.appendChild(posterImage);\n                const movieInfo = document.createElement(\"div\");\n                movieInfo.classList.add(\"movie-info\");\n                card.appendChild(movieInfo);\n                const title = document.createElement(\"h2\");\n                title.textContent = movie.title;\n                title.classList.add(\"movie-title\");\n                movieInfo.appendChild(title);\n                const subtitle = document.createElement(\"h3\");\n                const year = movie.release_date ? movie.release_date.substring(0, 4) : \"N/A\";\n                const genre = movie.genres ? movie.genres.slice(0, 2).join(\", \") : \"N/A\";\n                subtitle.textContent = `${genre} | ${year}`;\n                subtitle.classList.add(\"movie-subtitle\");\n                movieInfo.appendChild(subtitle);\n                const ratingInfo = document.createElement(\"span\");\n                const rating = movie.vote_average.toFixed(1);\n                ratingInfo.textContent = `${rating}`;\n                ratingInfo.classList.add(\"rating-info\");\n                movieInfo.appendChild(ratingInfo);\n                let styleColor;\n                switch(true){\n                    case rating >= 8:\n                        styleColor = \"#00e600\";\n                        break;\n                    case rating >= 6:\n                        styleColor = \"#ffff00\";\n                        break;\n                    case rating < 5.99:\n                        styleColor = \"#ff0000\";\n                        break;\n                    default:\n                        styleColor = \"black\";\n                }\n                if (rating < 0.05) ratingInfo.style.display = \"none\";\n                ratingInfo.style.color = styleColor;\n                ratingInfo.style.borderColor = styleColor;\n                card.addEventListener(\"click\", ()=>(0, $ccqLe.openModal)(movie));\n                galleryLib.appendChild(card);\n            });\n        }\n    }\n    watchedBtn.addEventListener(\"click\", ()=>{\n        watchedBtn.classList.add(\"active\");\n        queueBtn.classList.remove(\"active\");\n        displayMoviesFromStorage(\"movies-watched\");\n    });\n    queueBtn.addEventListener(\"click\", ()=>{\n        queueBtn.classList.add(\"active\");\n        watchedBtn.classList.remove(\"active\");\n        displayMoviesFromStorage(\"movies-queue\");\n    });\n    displayMoviesFromStorage(\"movies-watched\");\n}); // function openModal(movie) {\n //   const modal = document.querySelector('.modal-custom');\n //   if (!modal) {\n //     console.error('Modal element is missing from the DOM');\n //     return;\n //   }\n //   modal.querySelector(\n //     '.modal-poster-custom',\n //   ).src = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n //   modal.querySelector('.modal-title-custom').textContent = movie.title;\n //   modal.querySelector('.modal-vote-value-custom').textContent = movie.vote_average;\n //   modal.querySelector('.modal-vote-count-custom').textContent = movie.vote_count;\n //   modal.querySelector('.modal-popularity-value-custom').textContent = movie.popularity;\n //   modal.querySelector('.modal-original-title-value-custom').textContent = movie.original_title;\n //   modal.querySelector('.modal-genre-value-custom').textContent = movie.genres.join(', ');\n //   modal.querySelector('.modal-description-custom').textContent = movie.overview;\n //   modal.style.display = 'block';\n //   const addWatchedRef = modal.querySelector('.add-to-watched-custom');\n //   const addQueueRef = modal.querySelector('.add-to-queue-custom');\n //   if (!addWatchedRef || !addQueueRef) {\n //     console.error('Add to Watched or Add to Queue buttons are missing from the modal');\n //     return;\n //   }\n //   const thisMovieId = movie.id.toString();\n //   const moviesWatched = JSON.parse(localStorage.getItem('movies-watched')) || [];\n //   const moviesQueue = JSON.parse(localStorage.getItem('movies-queue')) || [];\n //   if (moviesWatched.some(m => m.id === movie.id)) {\n //     addWatchedRef.textContent = 'REMOVE FROM WATCHED';\n //   } else {\n //     addWatchedRef.textContent = 'ADD TO WATCHED';\n //   }\n //   if (moviesQueue.some(m => m.id === movie.id)) {\n //     addQueueRef.textContent = 'REMOVE FROM QUEUE';\n //   } else {\n //     addQueueRef.textContent = 'ADD TO QUEUE';\n //   }\n //   addWatchedRef.onclick = function () {\n //     let moviesWatched = JSON.parse(localStorage.getItem('movies-watched')) || [];\n //     if (moviesWatched.some(m => m.id === movie.id)) {\n //       moviesWatched = moviesWatched.filter(m => m.id !== movie.id);\n //       localStorage.setItem('movies-watched', JSON.stringify(moviesWatched));\n //       addWatchedRef.textContent = 'ADD TO WATCHED';\n //     } else {\n //       moviesWatched.push(movie);\n //       localStorage.setItem('movies-watched', JSON.stringify(moviesWatched));\n //       addWatchedRef.textContent = 'REMOVE FROM WATCHED';\n //     }\n //   };\n //   addQueueRef.onclick = function () {\n //     let moviesQueue = JSON.parse(localStorage.getItem('movies-queue')) || [];\n //     if (moviesQueue.some(m => m.id === movie.id)) {\n //       moviesQueue = moviesQueue.filter(m => m.id !== movie.id);\n //       localStorage.setItem('movies-queue', JSON.stringify(moviesQueue));\n //       addQueueRef.textContent = 'ADD TO QUEUE';\n //     } else {\n //       moviesQueue.push(movie);\n //       localStorage.setItem('movies-queue', JSON.stringify(moviesQueue));\n //       addQueueRef.textContent = 'REMOVE FROM QUEUE';\n //     }\n //   };\n // }\n\n\n\n\n//# sourceMappingURL=library.e3a235f2.js.map\n","import './sass/main.scss';\nimport './scripts/footer';\nimport './scripts/modal_films';\nimport './scripts/loader';\nimport './scripts/library-films';\n","import { createModal, openModal } from './fetch';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const watchedBtn = document.querySelector('.button-watched');\n  const queueBtn = document.querySelector('.button-queue');\n  const galleryLib = document.querySelector('.gallery_lib ul');\n  const emptyLibraryText = document.querySelector('.library_text_empty');\n  const libraryImgContainer = document.querySelector('.library_img_container');\n\n  if (!watchedBtn || !queueBtn || !galleryLib || !emptyLibraryText || !libraryImgContainer) {\n    console.error('One or more required elements are missing from the DOM');\n    return;\n  }\n\n  function displayMoviesFromStorage(storageKey) {\n    const movies = JSON.parse(localStorage.getItem(storageKey)) || [];\n\n    galleryLib.innerHTML = '';\n\n    if (movies.length === 0) {\n      emptyLibraryText.style.display = 'block';\n      libraryImgContainer.style.display = 'flex';\n    } else {\n      emptyLibraryText.style.display = 'none';\n      libraryImgContainer.style.display = 'none';\n\n      movies.forEach(movie => {\n        const card = document.createElement('li');\n        card.classList.add('card');\n\n        const posterUrl = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n        const posterImage = document.createElement('img');\n        posterImage.src = posterUrl;\n        posterImage.alt = movie.title;\n        posterImage.classList.add('movie-poster');\n        card.appendChild(posterImage);\n\n        const movieInfo = document.createElement('div');\n        movieInfo.classList.add('movie-info');\n        card.appendChild(movieInfo);\n\n        const title = document.createElement('h2');\n        title.textContent = movie.title;\n        title.classList.add('movie-title');\n        movieInfo.appendChild(title);\n\n        const subtitle = document.createElement('h3');\n        const year = movie.release_date ? movie.release_date.substring(0, 4) : 'N/A';\n        const genre = movie.genres ? movie.genres.slice(0, 2).join(', ') : 'N/A';\n        subtitle.textContent = `${genre} | ${year}`;\n        subtitle.classList.add('movie-subtitle');\n        movieInfo.appendChild(subtitle);\n\n        const ratingInfo = document.createElement('span');\n        const rating = movie.vote_average.toFixed(1);\n        ratingInfo.textContent = `${rating}`;\n        ratingInfo.classList.add('rating-info');\n        movieInfo.appendChild(ratingInfo);\n\n        let styleColor;\n        switch (true) {\n          case rating >= 8:\n            styleColor = '#00e600';\n            break;\n          case rating >= 6:\n            styleColor = '#ffff00';\n            break;\n          case rating < 5.99:\n            styleColor = '#ff0000';\n            break;\n          default:\n            styleColor = 'black';\n        }\n\n        if (rating < 0.05) {\n          ratingInfo.style.display = 'none';\n        }\n\n        ratingInfo.style.color = styleColor;\n        ratingInfo.style.borderColor = styleColor;\n\n        card.addEventListener('click', () => openModal(movie));\n\n        galleryLib.appendChild(card);\n      });\n    }\n  }\n\n  watchedBtn.addEventListener('click', () => {\n    watchedBtn.classList.add('active');\n    queueBtn.classList.remove('active');\n    displayMoviesFromStorage('movies-watched');\n  });\n\n  queueBtn.addEventListener('click', () => {\n    queueBtn.classList.add('active');\n    watchedBtn.classList.remove('active');\n    displayMoviesFromStorage('movies-queue');\n  });\n\n  displayMoviesFromStorage('movies-watched');\n});\n\n// function openModal(movie) {\n//   const modal = document.querySelector('.modal-custom');\n//   if (!modal) {\n//     console.error('Modal element is missing from the DOM');\n//     return;\n//   }\n\n//   modal.querySelector(\n//     '.modal-poster-custom',\n//   ).src = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n//   modal.querySelector('.modal-title-custom').textContent = movie.title;\n//   modal.querySelector('.modal-vote-value-custom').textContent = movie.vote_average;\n//   modal.querySelector('.modal-vote-count-custom').textContent = movie.vote_count;\n//   modal.querySelector('.modal-popularity-value-custom').textContent = movie.popularity;\n//   modal.querySelector('.modal-original-title-value-custom').textContent = movie.original_title;\n//   modal.querySelector('.modal-genre-value-custom').textContent = movie.genres.join(', ');\n//   modal.querySelector('.modal-description-custom').textContent = movie.overview;\n//   modal.style.display = 'block';\n\n//   const addWatchedRef = modal.querySelector('.add-to-watched-custom');\n//   const addQueueRef = modal.querySelector('.add-to-queue-custom');\n\n//   if (!addWatchedRef || !addQueueRef) {\n//     console.error('Add to Watched or Add to Queue buttons are missing from the modal');\n//     return;\n//   }\n\n//   const thisMovieId = movie.id.toString();\n\n//   const moviesWatched = JSON.parse(localStorage.getItem('movies-watched')) || [];\n//   const moviesQueue = JSON.parse(localStorage.getItem('movies-queue')) || [];\n\n//   if (moviesWatched.some(m => m.id === movie.id)) {\n//     addWatchedRef.textContent = 'REMOVE FROM WATCHED';\n//   } else {\n//     addWatchedRef.textContent = 'ADD TO WATCHED';\n//   }\n\n//   if (moviesQueue.some(m => m.id === movie.id)) {\n//     addQueueRef.textContent = 'REMOVE FROM QUEUE';\n//   } else {\n//     addQueueRef.textContent = 'ADD TO QUEUE';\n//   }\n\n//   addWatchedRef.onclick = function () {\n//     let moviesWatched = JSON.parse(localStorage.getItem('movies-watched')) || [];\n//     if (moviesWatched.some(m => m.id === movie.id)) {\n//       moviesWatched = moviesWatched.filter(m => m.id !== movie.id);\n//       localStorage.setItem('movies-watched', JSON.stringify(moviesWatched));\n//       addWatchedRef.textContent = 'ADD TO WATCHED';\n//     } else {\n//       moviesWatched.push(movie);\n//       localStorage.setItem('movies-watched', JSON.stringify(moviesWatched));\n//       addWatchedRef.textContent = 'REMOVE FROM WATCHED';\n//     }\n//   };\n\n//   addQueueRef.onclick = function () {\n//     let moviesQueue = JSON.parse(localStorage.getItem('movies-queue')) || [];\n//     if (moviesQueue.some(m => m.id === movie.id)) {\n//       moviesQueue = moviesQueue.filter(m => m.id !== movie.id);\n//       localStorage.setItem('movies-queue', JSON.stringify(moviesQueue));\n//       addQueueRef.textContent = 'ADD TO QUEUE';\n//     } else {\n//       moviesQueue.push(movie);\n//       localStorage.setItem('movies-queue', JSON.stringify(moviesQueue));\n//       addQueueRef.textContent = 'REMOVE FROM QUEUE';\n//     }\n//   };\n// }\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$ccqLe","document","addEventListener","watchedBtn","querySelector","queueBtn","galleryLib","emptyLibraryText","libraryImgContainer","console","error","displayMoviesFromStorage","storageKey","movies","JSON","parse","localStorage","getItem","innerHTML","length","style","display","forEach","movie","styleColor","card","createElement","classList","add","posterUrl","poster_path","posterImage","src","alt","title","appendChild","movieInfo","textContent","subtitle","year","release_date","substring","genre","genres","slice","join","ratingInfo","rating","vote_average","toFixed","color","borderColor","openModal","remove"],"version":3,"file":"library.e3a235f2.js.map"}